// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThickTech.BE.Persistence;

#nullable disable

namespace ThickTech.BE.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250111072641_Init Migrations")]
    partial class InitMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("images")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("blogs", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("category_slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Club", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("club_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("club_goals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("club_images")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("club_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("club_title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("clubs", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.ClubDetail", b =>
                {
                    b.Property<Guid>("club_detail_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("images")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("master_id")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("club_detail_id");

                    b.HasIndex("master_id");

                    b.ToTable("club_details", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("file_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("file_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("file_type")
                        .HasColumnType("integer");

                    b.Property<bool>("is_temp")
                        .HasColumnType("boolean");

                    b.HasKey("file_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("order_status")
                        .HasColumnType("integer");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Product"
                        },
                        new
                        {
                            id = 2,
                            name = "Blog"
                        });
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("discount_price")
                        .HasColumnType("numeric");

                    b.Property<string>("images")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("product_category")
                        .HasColumnType("uuid");

                    b.Property<int>("quantity_in")
                        .HasColumnType("integer");

                    b.Property<int>("quantity_out")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("product_category");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.Property<int>("permission_id")
                        .HasColumnType("integer");

                    b.HasKey("role_id", "permission_id");

                    b.HasIndex("permission_id");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.RoleUser", b =>
                {
                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("role_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("role_user", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("password_hash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("password_salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("error")
                        .HasColumnType("text");

                    b.Property<DateTime>("occurred_on_utc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("processed_on_utc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Persistence.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id", "name");

                    b.ToTable("outbox_message_consumers", (string)null);
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Blog", b =>
                {
                    b.HasOne("ThickTech.BE.Domain.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.ClubDetail", b =>
                {
                    b.HasOne("ThickTech.BE.Domain.Entities.Club", "club")
                        .WithMany("details")
                        .HasForeignKey("master_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("club");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Order", b =>
                {
                    b.HasOne("ThickTech.BE.Domain.Entities.Product", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThickTech.BE.Domain.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Product", b =>
                {
                    b.HasOne("ThickTech.BE.Domain.Entities.Category", "category")
                        .WithMany()
                        .HasForeignKey("product_category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ThickTech.BE.Domain.Entities.Permission", "permission")
                        .WithMany("role_permissions")
                        .HasForeignKey("permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThickTech.BE.Domain.Entities.Role", "role")
                        .WithMany("role_permissions")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.RoleUser", b =>
                {
                    b.HasOne("ThickTech.BE.Domain.Entities.Role", "role")
                        .WithMany("role_users")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThickTech.BE.Domain.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Club", b =>
                {
                    b.Navigation("details");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Permission", b =>
                {
                    b.Navigation("role_permissions");
                });

            modelBuilder.Entity("ThickTech.BE.Domain.Entities.Role", b =>
                {
                    b.Navigation("role_permissions");

                    b.Navigation("role_users");
                });
#pragma warning restore 612, 618
        }
    }
}
